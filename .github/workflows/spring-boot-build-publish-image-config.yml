name: Build/publish Docker image and update Kubernetes config

on:
  workflow_call:
    inputs:
      image-name:
        description: Name of Docker image
        required: true
        type: string
      java-version:
        description: Main version of java
        default: '11'
        required: false
        type: string
      kustomize-overlay:
        description: Kustomize overlay to use for image update
        default: 'latest'
        required: false
        type: string
    secrets:
      eid-build-token:
        description: Token from eid-build
        required: true
      maven-user:
        description: Maven user
        required: true
      maven-password:
        description: Maven password
        required: true
      registry-url:
        description: Image/Container Registery URL
        required: true
      registry-username:
        description: Image/Container Registery username
        required: true
      registry-password:
        description: Image/Container Registery password
        required: true
      allure-user:
        description: Allure user for reporting results of unit tests
        required: true
      allure-password:
        description: Allure password for reporting results of unit tests
        required: true
jobs:
  build-image:
      runs-on: ubuntu-latest
      env:
        IMAGE-NAME: ${{ inputs.image-name }}
        DOCKLE_HOST: "unix:///var/run/docker.sock"
      steps:
        - name: Set imagetag as env variable
          run: echo "IMAGETAG=$(date +'%Y-%m-%d-%H%M')-${GITHUB_SHA::8}" >> "$GITHUB_ENV"
        - uses: actions/checkout@v3
        - name: yaml-lint
          uses: ibiqlik/action-yamllint@v3
          with:
            file_or_dir: src/main/resources/application*.y*ml
            config_data: |
              extends: default
              rules:
                empty-lines: disable
                line-length:
                  max: 150
                  level: warning
        - name: Set up JDK ${{ inputs.java-version }}
          uses: actions/setup-java@v3
          with:
            distribution: 'liberica'
            java-version: ${{ inputs.java-version }}
        - name: Cache Maven packages
          uses: actions/cache@v3.0.5
          with:
            path: ~/.m2
            key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            restore-keys: ${{ runner.os }}-m2
        - uses: s4u/maven-settings-action@v2.6.0
          with:
            servers: |
              [{
                  "id": "github-oidc-sdk",
                  "username": "${{ secrets.maven-user }}",
                  "password": "${{ secrets.maven-password }}"
              },
              {
                "id": "github",
                "username": "${{ secrets.maven-user }}",
                "password": "${{ secrets.maven-password }}"
              }]
        - name: Maven update version used in application.yaml
          run: mvn versions:set -B -DnewVersion="$IMAGETAG"
        - name: Build image with Maven/Spring Boot
          run: mvn -B spring-boot:build-image --file pom.xml -Dspring-boot.build-image.imageName=${{ secrets.registry-url }}/${{env.IMAGE-NAME}}:"$IMAGETAG" -Dspring-boot.build-image.builder=paketobuildpacks/builder:tiny
        - name: Container image scan
          uses: Azure/container-scan@v0
          with:
            # Docker image to scan
            image-name: ${{ secrets.registry-url }}/${{env.IMAGE-NAME}}:${{env.IMAGETAG}}
            # Minimum severities of vulnerabilities to be displayed (UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL)
            token: ${{ github.token }}
#           trivy-version: 0.22.0
            severity-threshold: HIGH
        - name: 'Login Azure docker container registery'
          uses: azure/docker-login@v1
          with:
            login-server: ${{ secrets.registry-url }}
            username: ${{ secrets.registry-username }}
            password: ${{ secrets.registry-password }}
        - name: 'Push image'
          run:
            docker push ${{ secrets.registry-url }}/${{env.IMAGE-NAME}}:${{env.IMAGETAG}}
        - run:
            echo "IMAGE_DIGEST=$(docker inspect --format='{{.RepoDigests}}' ${{ secrets.registry-url }}/${{env.IMAGE-NAME}}:${{env.IMAGETAG}}|cut -d '@' -f 2|cut -d ']' -f 1)" >> "$GITHUB_ENV"
        - name: Checkout Allure test scripts
          uses: actions/checkout@v3
          with:
            repository: felleslosninger/eid-github-actions
            token: ${{ secrets.eid-build-token }}
            path: scripts
        - name: Publish test report to allure server
          run: bash ./scripts/scripts/allure_test_results.sh
          env:
            PROJECT_REPO: ${{ github.event.repository.name }}
            ALLURE_USER: ${{ secrets.allure-user }}
            ALLURE_PASSWORD: ${{ secrets.allure-password }}
            MULTI_MODULE: "false"
        - uses: actions-ecosystem/action-regex-match@v2
          id: regex-find-jira-id
          with:
            text: ${{ github.event.head_commit.message }}
            regex: '^([a-zA-Z]{2,6}-[\d]+)(.+)'
        - id: output-jira-id
          if: ${{ steps.regex-find-jira-id.outputs.match != '' }}
          run: echo "JIRA_ID=${{ steps.regex-find-jira-id.outputs.group1 }}" >> "$GITHUB_ENV"
        - name: Check PR label for dependabot
          id: check_dependabot
          uses: shioyang/check-pr-labels-on-push-action@v1.0.6
          with:
            github-token: ${{ secrets.eid-build-token }}
            labels: '["dependencies"]'
        - name: Check PR label for manual-deploy
          id: check_manual_deploy
          uses: shioyang/check-pr-labels-on-push-action@v1.0.6
          with:
            github-token: ${{ secrets.eid-build-token }}
            labels: '["manual-deploy"]'
        - id: output-dependabot
          if: ${{ steps.regex-find-jira-id.outputs.match == '' && steps.check_dependabot.outputs.result == 'true'}}
          run: echo "JIRA_ID=Dependabot" >> "$GITHUB_ENV"
        - name: 'update Kubernetes for new version of image ${{ inputs.image-name }} (Dependabot)'
          if: ${{steps.check_dependabot.outputs.result == 'true'}}
          uses: peter-evans/repository-dispatch@11ba7d3f32dc7cc919d1c43f1fec1c05260c26b5 # pin@v2
          with:
            token: ${{ secrets.eid-build-token }}
            event-type: update-version
            repository: 'felleslosninger/idporten-cd'
            client-payload: '{"image-name": "${{env.IMAGE-NAME}}", "registry-url": "${{secrets.registry-url}}", "image": "${{secrets.registry-url}}/${{env.IMAGE-NAME}}:${{env.IMAGETAG}}@${{env.IMAGE_DIGEST}}","version":"${{env.IMAGETAG}}","kustomize-overlay":"${{inputs.kustomize-overlay}}","manual-deploy":${{ steps.check_manual_deploy.outputs.result }},"jira-id":"${{env.JIRA_ID}}","actor":"${{github.event.pusher.name }}"}'
        - name: 'update Kubernetes for new version of image ${{ inputs.image-name }}'
          if: ${{steps.check_dependabot.outputs.result == 'false'}}
          uses: peter-evans/repository-dispatch@11ba7d3f32dc7cc919d1c43f1fec1c05260c26b5 # pin@v2
          with:
            token: ${{ secrets.eid-build-token }}
            event-type: update-version
            repository: 'felleslosninger/idporten-cd'
            client-payload: '{"image-name": "${{env.IMAGE-NAME}}", "registry-url": "${{secrets.registry-url}}", "image": "${{secrets.registry-url}}/${{env.IMAGE-NAME}}:${{env.IMAGETAG}}@${{env.IMAGE_DIGEST}}","version":"${{env.IMAGETAG}}","kustomize-overlay":"${{inputs.kustomize-overlay}}","manual-deploy":${{ steps.check_manual_deploy.outputs.result }},"jira-id":"${{env.JIRA_ID}}","author":${{ toJSON(github.event.head_commit.author) }}}'
