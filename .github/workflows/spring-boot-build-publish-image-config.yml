name: Build/publish Docker image and update Kubernetes config

on:
  workflow_call:
    inputs:
      application-name:
        description: Name of application
        required: false
        type: string
      image-name:
        description: Name of Docker image
        required: false
        type: string
      image-pack:
        description: Docker image pack of builder-jammy-tiny, builder-jammy-base or builder-jammy-full
        default: builder-jammy-tiny
        required: false
        type: string
      java-version:
        description: Main version of java
        default: '11'
        required: false
        type: string
      container-scan-offline-mode:
        description: Container-scan is default download updated CVE definitions via Trivy, enable offline on download problems
        default: false
        type: boolean
    secrets:
      eid-build-token:
        description: Token from eid-build
        required: true
      maven-user:
        description: Maven user
        required: true
      maven-password:
        description: Maven password
        required: true
      registry-url:
        description: Image/Container Registery URL
        required: true
      registry-username:
        description: Image/Container Registery username
        required: true
      registry-password:
        description: Image/Container Registery password
        required: true
      allure-user:
        description: Allure user for reporting results of unit tests
        required: false
      allure-password:
        description: Allure password for reporting results of unit tests
        required: false
jobs:
  build-image:
      runs-on: ubuntu-latest
      env:
        REPOSITORY-NAME: ${{ github.event.repository.name }}
        DOCKLE_HOST: "unix:///var/run/docker.sock"
        #TRIVY_TIMEOUT: "15m"
        TRIVY_OFFLINE_SCAN: ${{ inputs.container-scan-offline-mode }}
      steps:
        - name: Set imagetag as env variable
          run: echo "IMAGETAG=$(date +'%Y-%m-%d-%H%M')-${GITHUB_SHA::8}" >> "$GITHUB_ENV"
        - name: Set image and application name
          run: |
             echo "IMAGE-NAME=${{ secrets.registry-url }}/${{ inputs.image-name || env.REPOSITORY-NAME }}" >> "$GITHUB_ENV"
             echo "APPLICATION-NAME=${{ inputs.application-name || env.REPOSITORY-NAME  }}" >> "$GITHUB_ENV"
        - uses: actions/checkout@v4
        - name: yaml-lint
          uses: ibiqlik/action-yamllint@v3
          with:
            file_or_dir: src/main/resources/application*.y*ml
            config_data: |
              extends: default
              rules:
                empty-lines: disable
                line-length:
                  max: 150
                  level: warning
        - name: Set up JDK ${{ inputs.java-version }}
          uses: actions/setup-java@v4
          with:
            distribution: 'liberica'
            java-version: ${{ inputs.java-version }}
        - name: Cache Maven packages
          uses: actions/cache@v4.0.2
          with:
            path: ~/.m2
            key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            restore-keys: ${{ runner.os }}-m2
        - uses: s4u/maven-settings-action@v3.0.0
          with:
            servers: |
              [{
                  "id": "github-oidc-sdk",
                  "username": "${{ secrets.maven-user }}",
                  "password": "${{ secrets.maven-password }}"
              },
              {
                "id": "github",
                "username": "${{ secrets.maven-user }}",
                "password": "${{ secrets.maven-password }}"
              }]
        - name: Maven update version used in application.yaml
          run: mvn versions:set -B -DnewVersion="$IMAGETAG"
        - name: Build image with Maven/Spring Boot
          run: mvn -B spring-boot:build-image --file pom.xml -Dspring-boot.build-image.imageName=${{env.IMAGE-NAME}}:${{env.IMAGETAG}} -Dspring-boot.build-image.builder=paketobuildpacks/${{ inputs.image-pack }} -Dspring-boot.build-image.createdDate=now
        - name: Run Trivy vulnerability scanner
          uses: aquasecurity/trivy-action@d710430a6722f083d3b36b8339ff66b32f22ee55 # pin@v0.19.0
          with:
            image-ref: ${{env.IMAGE-NAME}}:${{env.IMAGETAG}}
            exit-code: '1'
            severity: 'CRITICAL,HIGH'
        - name: Create SBOM artifact-name
          id: sbom-name
          run: |
            SBOM_NAME=$(echo ${{env.IMAGE-NAME}} | tr '/' '-')
            echo "SBOM_ARTIFACT_ID=$SBOM_NAME" >> "$GITHUB_OUTPUT"
        - uses: anchore/sbom-action@v0
          with:
            image: ${{env.IMAGE-NAME}}:${{env.IMAGETAG}}
            artifact-name: sbom-${{steps.sbom-name.outputs.SBOM_ARTIFACT_ID}}-${{env.IMAGETAG}}.spdx
        - name: 'Login Azure docker container registery'
          uses: azure/docker-login@v1
          with:
            login-server: ${{ secrets.registry-url }}
            username: ${{ secrets.registry-username }}
            password: ${{ secrets.registry-password }}
        - name: 'Push image'
          run:
            docker push ${{env.IMAGE-NAME}}:${{env.IMAGETAG}}
        - run:
            echo "IMAGE_DIGEST=$(docker inspect --format='{{.RepoDigests}}' ${{env.IMAGE-NAME}}:${{env.IMAGETAG}}|cut -d '@' -f 2|cut -d ']' -f 1)" >> "$GITHUB_ENV"
        - name: Find jira-id
          id: regex-find-jira-id
          env:
            GIT_MSG: ${{ github.event.head_commit.message }}
          run: |
              JIID=$(echo "$GIT_MSG" | head -1 |
              sed -E 's/^([a-zA-Z]{2,6}\-[0-9]+).+/\1/')
              echo "JIRAID=$JIID" >> "$GITHUB_OUTPUT"
        - id: output-jira-id
          if: ${{ steps.regex-find-jira-id.outputs.JIRAID != '' }}
          run: echo "JIRA_ID=${{ steps.regex-find-jira-id.outputs.JIRAID }}" >> "$GITHUB_ENV"
        - uses: octokit/request-action@v2.x
          id: get_labels
          with:
            route: GET /repos/${{ github.repository }}/commits/${{ github.sha }}/pulls
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        - run: |
              echo "PR_LABELS=${{ join(fromJSON(steps.get_labels.outputs.data)[0].labels.*.name) }}" >> "$GITHUB_ENV"
              echo "PR_NUMBER=${{ fromJson(steps.get_labels.outputs.data)[0].number }}" >> "$GITHUB_ENV"
        - id: check_dependabot
          run: echo "DEPENDABOT=${{ contains(env.PR_LABELS, 'dependencies') }}" >> "$GITHUB_ENV"
        - id: output-dependabot
          if: ${{ steps.regex-find-jira-id.outputs.match == '' && env.DEPENDABOT == 'true' }}
          run: echo "JIRA_ID=Dependabot" >> "$GITHUB_ENV"
        - name: 'update Kubernetes for new version of image ${{env.IMAGE-NAME}} (Dependabot)'
          if: ${{ env.DEPENDABOT == 'true' }}
          uses: peter-evans/repository-dispatch@ff45666b9427631e3450c54a1bcbee4d9ff4d7c0 # pin@v2
          with:
            token: ${{ secrets.eid-build-token }}
            event-type: update-version
            repository: 'felleslosninger/idporten-cd'
            client-payload: '{"image-name": "${{env.IMAGE-NAME}}","image": "${{env.IMAGE-NAME}}:${{env.IMAGETAG}}@${{env.IMAGE_DIGEST}}","version":"${{env.IMAGETAG}}","application-name":"${{env.APPLICATION-NAME}}","jira-id":"${{env.JIRA_ID}}","actor":"${{github.event.pusher.name }}","pr-number":"${{ env.PR_NUMBER }}","pr-labels":"${{ env.PR_LABELS }}","sha":"${{ github.sha }}","repository":"${{ github.repository }}" }'
        - name: 'update Kubernetes for new version of image ${{env.IMAGE-NAME}}'
          if: ${{ env.DEPENDABOT == 'false' }}
          uses: peter-evans/repository-dispatch@ff45666b9427631e3450c54a1bcbee4d9ff4d7c0 # pin@v2
          with:
            token: ${{ secrets.eid-build-token }}
            event-type: update-version
            repository: 'felleslosninger/idporten-cd'
            client-payload: '{"image-name": "${{env.IMAGE-NAME}}","image": "${{env.IMAGE-NAME}}:${{env.IMAGETAG}}@${{env.IMAGE_DIGEST}}","version":"${{env.IMAGETAG}}","application-name":"${{env.APPLICATION-NAME}}","jira-id":"${{env.JIRA_ID}}","author":${{ toJSON(github.event.head_commit.author) }},"pr-number":"${{ env.PR_NUMBER }}","pr-labels":"${{ env.PR_LABELS }}","sha":"${{ github.sha }}","repository":"${{ github.repository }}" }'
