name: Truncate and populate cve bucket

on:
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        always-auth: true
        node-version: '18.x'
        registry-url: https://npm.pkg.github.com
        scope: ${{ github.repository_owner }}
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete all data in bucket
      uses: actions/github-script@v6
      env:
        INFLUXDB_TOKEN: ${{ secrets.INFLUXDB_TOKEN_CVE }}
      with:
        script: |
          const { MY_TOKEN } = process.env
          const timeInterval = {
            start: "2023-01-01T00:00:00.00Z",
            stop: (function() {
              const date = new Date();
              const month = String(date.getMonth()+1).padStart(2, '0');
              const day = String(date.getDate()+1).padStart(2, '0');
              const stopPoint = date.getFullYear() + "-" + month + "-" + day + "T00:00:00.00Z";
              return stopPoint;
              }())
          }
          console.log("timeInterval:",timeInterval);
          const url = 'https://westeurope-1.azure.cloud2.influxdata.com/api/v2/delete?bucket=cve';
          fetch(url, {
            method: 'POST',
            headers: {
              "Content-Type": "application/json",
              "Authorization": "Token ${{ secrets.INFLUXDB_TOKEN_CVE }}"
            },
            body: JSON.stringify(timeInterval),
          })
          .then(response => {
            if (!response.ok) {
              throw new Error('An error occured:', response.json());
            } else {
              console.log("Successfully truncated bucket cve")
            }
          })
          .catch(error => {
              console.error('Failed to truncate bucket:', error);
          });
    - run: npm install octokit
    - name: Get repositories
      id: repository_names
      uses: actions/github-script@v6
      env:
        PLATFORM_READ_PAT: ${{ secrets.PLATFORM_READ_PAT }}
      with:
        script: |
          const { PLATFORM_READ_PAT } = process.env
          const { Octokit } = require('octokit');
          const octokit = new Octokit({
            auth: `${PLATFORM_READ_PAT}`,
            request: {
                fetch: fetch,
              },
          })

          async function getPaginatedData(url) {
            const nextPattern = /(?<=<)([\S]*)(?=>; rel="Next")/i;
            let pagesRemaining = true;
            let data = [];

            while (pagesRemaining) {
              const response = await octokit.request(`GET ${url}`, {
                headers: {
                  "X-GitHub-Api-Version": "2022-11-28",
                },
                per_page: 100,
              });

              const parsedData = parseData(response.data)
              data = [...data, ...parsedData];

              const linkHeader = response.headers.link;

              pagesRemaining = linkHeader && linkHeader.includes(`rel=\"next\"`);
              //console.log("pages remaining:", pagesRemaining);

              if (pagesRemaining) {
                url = linkHeader.match(nextPattern)[0];
                //console.log("url:", url);
              }
            }
            return data;
          }

          function parseData(data) {
            if (Array.isArray(data)) {
              return data
            }

            if (!data) {
              return []
            }

            delete data.incomplete_results;
            delete data.repository_selection;
            delete data.total_count;
            const namespaceKey = Object.keys(data)[0];
            data = data[namespaceKey];
            return data;
          }

          const response = await getPaginatedData("/orgs/felleslosninger/repos");
          const repositories = [];
          const blacklisted_repositories = [];
          const regex = /^(felleslosninger)\/(altinn-|ansattporten-|eid-|efm-|ein-|es-|idporten-|krr-|maskinporten|minid-|minprofil|mf-)/;

          response.map((object) => {
            const { full_name } = object;
            if (regex.test(full_name)) {
              repositories.push(full_name);
            } else {
              blacklisted_repositories.push(full_name);
            }
          });

          console.log("Whitelisted repositores:",repositories);
          console.log("Blacklisted repositores:",blacklisted_repositories);
          const json = JSON.stringify(repositories);
          return json;
    - name: Add to GITHUB OUTPUT
      id: set-matrix
      run: |
        the_matrix=${{ steps.repository_names.outputs.result }}
        echo "matrix=$the_matrix" >> "$GITHUB_OUTPUT"
  checkout-repository:
    needs: run
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 30
      fail-fast: false
      matrix:
        repository: ${{ fromJSON(needs.run.outputs.matrix) }}
        exclude:
          - repository: "felleslosninger/eid-dev-openshift"
          - repository: "felleslosninger/eid-github-workflows"
          - repository: "felleslosninger/eid-github-actions"
          - repository: "felleslosninger/eid-jenkins-pipeline"
          - repository: "felleslosninger/eid-runbooks"
          - repository: "felleslosninger/eid-pipeline-config"
          - repository: "felleslosninger/eid-pipeline-branch"
    steps:
      - name: Check repo name
        run: echo ${{ matrix.repository }}
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.repository }}
          path: ${{ matrix.repository }}
          sparse-checkout: .
          token: ${{ secrets.PLATFORM_READ_PAT }}
      - name: Write to trivy.txt if .trivyignore exist
        run: |
          cd ${{ matrix.repository }}
          if [ -f ".trivyignore" ]; then
            cat .trivyignore | grep -E -i '^(CVE).*' | cut -d' ' -f 1 >> trivy.txt
            else
              echo ".trivyignore file not found"
              echo "Abort with exit 1"
              exit 1
          fi
      - name: Write CVE suppressions to InfluxDB with bash
        shell: bash
        run: |
          REPOSITORY_NAME=${{ matrix.repository }}
          APPLICATION_NAME=$(echo ${REPOSITORY_NAME} | cut -d'/' -f 2)

          # cd into source directory
          cd ${{ matrix.repository }}

          cve_suppressions=$(cat ./trivy.txt)

          # Handle CVEs with whitespaces
          # Like: CVE-123 # spring security
          IFS=$(echo -en "\n\b")
          for suppression in ${cve_suppressions[@]}; do
            if [ ! "$suppression" == "" ]; then
              event_type="suppressed"
              bucket="cve,"
              tags="repository=${REPOSITORY_NAME},application=${APPLICATION_NAME}"
              fields=" commit_hash=\"${{ github.event.head_commit.id }}\",cve=\"${suppression}\",event=\"${event_type}\""
              # Create data file to post
              echo "$bucket$tags$fields" >> suppression_changes.txt
              curl -i --request POST \
                "https://westeurope-1.azure.cloud2.influxdata.com/api/v2/write?org=eid&bucket=cve&precision=ns" \
                --header "Authorization: Token ${{ secrets.INFLUXDB_TOKEN }}" \
                --header "Content-Type: text/plain; charset=utf-8" \
                --header "Accept: application/json" \
                --data-binary @suppression_changes.txt
              # Remove data file after post
              rm suppression_changes.txt
            fi
            sleep 1
          done
