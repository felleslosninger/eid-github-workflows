name: Truncate and populate with JS

on:
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          always-auth: true
          node-version: "18.x"
          registry-url: https://npm.pkg.github.com
          scope: ${{ github.repository_owner }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - run: npm install octokit
      - run: npm install cross-fetch

      - name: Checkout JS Tools
        uses: actions/checkout@v4
        with:
          repository: felleslosninger/plattform-test-app
          path: tools

      - name: Truncate bucket
        uses: actions/github-script@v6
        env:
          INFLUXDB_TOKEN: ${{ secrets.INFLUXDB_TOKEN_CVE }}
        with:
          script: |
            const INFLUXDB = require('./tools/.github/js/influxdb-client.js');
            const BUCKET = 'cve';
            INFLUXDB.truncate_bucket(BUCKET);

      - name: Get repositories
        id: repository_names
        uses: actions/github-script@v6
        env:
          PLATFORM_TOKEN: ${{ secrets.PLATFORM_READ_PAT }}
        with:
          script: |
            const OCTOKIT = require('./tools/.github/js/octokit.js');
            const response = await OCTOKIT.getRepositories("/orgs/felleslosninger/repos");
            const regex = /^(felleslosninger)\/(plattform-test-app|altinn-|ansattporten-|eid-|efm-|ein-|es-|idporten-|krr-|maskinporten|minid-|minprofil|mf-)/;
            let repositories = [];
            let blacklisted_repositories = [];

            response.map((object) => {
              const { full_name } = object;
              if (regex.test(full_name)) {
                repositories.push(full_name);
              } else {
                blacklisted_repositories.push(full_name);
              }
            });

            console.log("Whitelisted repositores:",repositories);
            console.log("Blacklisted repositores:",blacklisted_repositories);
            //const json = JSON.stringify(repositories.slice(150));
            const json = JSON.stringify(repositories);
            return json;

      - name: Add to GITHUB OUTPUT
        id: set-matrix
        run: |
          the_matrix=${{ steps.repository_names.outputs.result }}
          echo "matrix=$the_matrix" >> "$GITHUB_OUTPUT"

  checkout-repository:
    needs: run
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 30
      fail-fast: false
      matrix:
        repository: ${{ fromJSON(needs.run.outputs.matrix) }}
        exclude:
          - repository: "felleslosninger/eid-dev-openshift"
          - repository: "felleslosninger/eid-github-workflows"
          - repository: "felleslosninger/eid-github-actions"
          - repository: "felleslosninger/eid-jenkins-pipeline"
          - repository: "felleslosninger/eid-runbooks"
          - repository: "felleslosninger/eid-pipeline-config"
          - repository: "felleslosninger/eid-pipeline-branch"
    steps:
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          always-auth: true
          node-version: "18.x"
          registry-url: https://npm.pkg.github.com
          scope: ${{ github.repository_owner }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Dependencies
        run: |
          npm install @influxdata/influxdb-client
          npm install cross-fetch

      - name: Check repo name
        run: echo ${{ matrix.repository }}

      - name: Set Application Name
        id: set-application-name
        run: echo "application-name=$(echo ${{ matrix.repository }} | cut -d'/' -f 2)" >> "$GITHUB_OUTPUT"

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.repository }}
          path: ${{ matrix.repository }}
          sparse-checkout: .
          token: ${{ secrets.PLATFORM_READ_PAT }}

      - name: Checkout JS Tools
        uses: actions/checkout@v4
        with:
          repository: felleslosninger/plattform-test-app
          path: tools

      - name: Write to trivy.txt if .trivyignore exist
        id: trivydata
        shell: bash
        run: |
          cd ${{ matrix.repository }}
          if [ -f "./.trivyignore" ] && [ -s "./.trivyignore" ]; then
            sed 's/^[ \t]*//' .trivyignore > .tmp_trivyignore
            grep -E -i '^(CVE).*' < .tmp_trivyignore | cut -d' ' -f 1 > trivy.txt
            if [ -f "trivy.txt" ] && [ -s "trivy.txt" ]; then
              suppressions_with_delimiter=($(cat trivy.txt | tr "\n" ","))
              echo "suppressions=$suppressions_with_delimiter" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "No .trivyignore file found"
          fi

      - name: Write CVE suppressions to InfluxDB
        id: write-supressions-to-influxdb
        uses: actions/github-script@v6
        env:
          INFLUXDB_TOKEN: ${{ secrets.INFLUXDB_TOKEN_CVE }}
          INFLUXDB_URL: "https://westeurope-1.azure.cloud2.influxdata.com"
          SUPPRESSIONS: ${{ steps.trivydata.outputs.suppressions }}
          APPLICATION: ${{ steps.set-application-name.outputs.application-name }}
          BUCKET: "cve"
          REPOSITORY: ${{ matrix.repository }}
        with:
          script: |
            const Utils = require('./tools/.github/js/utils.js');
            const { InfluxDB, Point } = require("@influxdata/influxdb-client");

            const {
              INFLUXDB_TOKEN,
              INFLUXDB_URL,
              ORGANIZATION,
              BUCKET,
              REPOSITORY
            } = process.env;

            const client = new InfluxDB({
              url: INFLUXDB_URL,
              token: INFLUXDB_TOKEN,
            }).getWriteApi(ORGANIZATION, BUCKET, "ns");

            const suppressions = [...Utils.toArrayFromString('${{ env.SUPPRESSIONS }}', ',')];

            for (let index = 0; index < suppressions.length; index++) {
              const point = new Point("cve")
                .tag("repository", "${{ env.REPOSITORY }}")
                .tag("application", "${{ env.APPLICATION }}")
                .stringField("commit_hash", "")
                .stringField("cve", `${suppressions[index]}`)
                .stringField("event", "suppressed");

              console.log(`Data: ${JSON.stringify(point)}`);
              client.writePoint(point);
            }